CREATE DATABASE  IF NOT EXISTS `helppages` /*!40100 DEFAULT CHARACTER SET utf8 */;
USE `helppages`;
-- MySQL dump 10.13  Distrib 5.5.16, for Win32 (x86)
--
-- Host: hurtrankdb.cpk4jjb2mzwd.us-west-2.rds.amazonaws.com    Database: helppages
-- ------------------------------------------------------
-- Server version	5.5.31

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `operators`
--

DROP TABLE IF EXISTS `operators`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `operators` (
  `Opr` varchar(47) DEFAULT NULL,
  ` Description` varchar(484) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `operators`
--

LOCK TABLES `operators` WRITE;
/*!40000 ALTER TABLE `operators` DISABLE KEYS */;
INSERT INTO `operators` (`Opr`, ` Description`) VALUES ('Active MQ',''),('Ajax',' The Ajax endpoint component allows Mule events to be sent and received asynchronously to and from a web browser.'),('All',' Sends the same message to multiple target message processors.'),('And',' Allows filtering of messages using And/Or/Not logic expressions.'),('Append String',' Appends a string to a string payload.'),('Async','Use an Async scope to start a secondary flow from within an application flow and have it execute simultaneously along with the main flow.'),('Asynchronous Processing Strategy',''),('Bean',''),('Body-to-Paramater-map',''),('Body-to-Parameter-map',' Transformers let you easily move a message between application processors that work on different types of data.'),('Byte-Array-to-Object',' Transformers let you easily move a message between application processors that work on different types of data.'),('Byte-Array-to-Serializable',' Transformers let you easily move a message between application processors that work on different types of data.'),('Byte-Array-to-String',' Transformers let you easily move a message between application processors that work on different types of data.'),('Choice',' Using an expression, sends a message to the first message processor that matches the expression criteria.'),('CMIS',' The CMIS Cloud Connector enables a Mule application to interact with any Content Management System (CMS) repository that implements the Content Management Interoperability Services (CMIS) specification.'),('Collection Aggregator',''),('Collection Splitter',' The collection splitter accepts a collection of objects, then splits the collection invoking the next message processor for each item in the collection in sequence.'),('Component',''),('Composite Source',' The Mule Studio Palette has a category of components called Scopes. You can think of a scope as a context in which you group other components to do some set of operations. A good example of a context is an asynchronous block of code; that is, code that executes separately while the main application processing continues. In Mule Studio, you can use an Async scope to start a secondary flow from within an application flow and have it execute simultaneously along with the main flow.'),('CSV-to-Maps',' Transformers let you easily move a message between application processors that work on different types of data.'),('Custom JMS',''),('Custom Processing Strategy',''),('Custom',''),('Echo',' Use Echo to echo or display the message payload.'),('Exception',' Filters messages according to the type of an exception.'),('Expression',' Executes one or more expressions on the current message. The results of these expressions becomes the payload of the current message.'),('File',' The File Endpoint enables reading and writing message data to and from a file system.'),('File-to-Byte-Array',' Transformers let you easily move a message between application processors that work on different types of data.'),('File-to-String',' Transformers let you easily move a message between application processors that work on different types of data.'),('Filter Ref','Use a Filter Ref to reference a global filter. Note that the global filter element must already be defined. Enter the global filter name in the Global Filter Ref property.'),('First Successful',' First Successful Flow Control sends received messages to the next message processor in a circular target list.'),('Flow Reference',' Use a Flow Reference to synchronously execute another flow that is external to the current flow.'),('FTP',' File Transfer Protocol (FTP) Endpoint carries message data to and from a remote server.'),('Generic',' The Generic Endpoint allows for a wide array of configuration options by defining a particular transport to be used as the endpoint.'),('Gmail',''),('Groovy',' Defines a Groovy script component to use as a transformer.'),('HTTP Polling',''),('HTTP',' The HTTP Endpoint allows your Mule application to send and receive requests via HTTP or HTTPS (HTTP over SSL protocol).'),('HTTP-Response-to-Object',' Transformers let you easily move a message between application processors that work on different types of data.'),('HTTP-Response-to-String',' Transformers let you easily move a message between application processors that work on different types of data.'),('Idempotent Redelivery Policy',' Idempotent Redelivery Policy Flow Control defines a policy for processing the redelivery of the same message.'),('IMAP',''),('Java',''),('JavaScript',' Defines a JavaScript script component to use as a transformer.'),('JDBC',' The JDBC Endpoint allows your Mule application to use JDBC to communicate with a database.'),('Jetty',''),('JMS',''),('JmsMessage-to-Object',' Transformers let you easily move a message between application processors that work on different types of data.'),('Json-to-Object',' The Json-to-Objects Transformer converts a Json-encoded object to a Java Object.'),('Logger',' Use Logger to log messages, such as error messages or exceptions.'),('Magento',' The Magento Cloud Connector enables a Mule application to access the Magento Sales Order APIs.'),('Maps-to-CSV',' The Maps-to-CSV Transformer converts a List of Map objects to a CSV file.'),('Maps-to-XML',' The Maps-to-XML Transformer converts a <i>List of Map</i> objects to XML.'),('Message Chunk Aggregator',' Message Chunk Aggregator combines multiple messages into one message by matching correlation IDs for those messages.'),('Message Chunk Splitter',' The Message Chunk Splitter Flow Control splits messages from within a collection of objects and sends each message to the next message processor.'),('Message Enricher',' The Mule Studio Palette has a category of components called Scopes. You can think of a scope as a context in which you group other components to do some set of operations. A good example of a context is an asynchronous block of code; that is, code that executes separately while the main application processing continues. In Mule Studio, you can use an Async scope to start a secondary flow from within an application flow and have it execute simultaneously along with the main flow.'),('Message Properties',' Add, delete, or rename message properties.'),('Message Property',' Matches properties on a message.'),('Message',' Used by a message processor to determine whether to handle incoming events or messages.'),('Message-to-HTTP-Response',' Transformers let you easily move a message between application processors that work on different types of data.'),('Message-to-Object',' Transformers let you easily move a message between application processors that work on different types of data.'),('Mongo DB',' The Mongo DB Cloud Connector provides a means for a Mule application to connect to a Mongo DB database.'),('Mule MQ',''),('Not',' Allows filtering of messages using And/Or/Not logic expressions.'),('Object-to-Byte-Array',' Transformers let you easily move a message between application processors that work on different types of data.'),('Object-to-HTTP-Request',' Transformers let you easily move a message between application processors that work on different types of data.'),('Object-to-JmsMessage',' Transformers let you easily move a message between application processors that work on different types of data.'),('Object-to-Json',' The Object-to-Json Transformer converts a Java Object to a JSON-encoded object that can be consumed by other languages, such as JavaScript or Ruby.'),('Object-to-Message',' Transformers let you easily move a message between application processors that work on different types of data.'),('Object-to-String',' Transformers let you easily move a message between application processors that work on different types of data.'),('Object-to-Xml',' Use a Object-to-XML transformer to transform a Java Object to XML data using XStream.'),('Or',' Allows filtering of messages using And/Or/Not logic expressions.'),('Payload',' Matches the type of the payload that is contained within the message.'),('Poll',' The Mule Studio Palette has a category of components called Scopes. You can think of a scope as a context in which you group other components to do some set of operations. A good example of a context is an asynchronous block of code; that is, code that executes separately while the main application processing continues. In Mule Studio, you can use an Async scope to start a secondary flow from within an application flow and have it execute simultaneously along with the main flow.'),('POP3',''),('Processor Chain',' The Mule Studio Palette has a category of components called Scopes. You can think of a scope as a context in which you group other components to do some set of operations. A good example of a context is an asynchronous block of code; that is, code that executes separately while the main application processing continues. In Mule Studio, you can use an Async scope to start a secondary flow from within an application flow and have it execute simultaneously along with the main flow.'),('Python',' Defines a script component to use as a transformer. The Script transformer lets you select the particular scripting engine from a pull-down list. The predefined script transformers Groovy, JavaScript, Python, and Ruby have the scripting engines already set.'),('Quartz',''),('Queued Asynchronous Processing Strategy',''),('Queued Thread Per Processor Processing Strategy',''),('RegEx',' Matches string messages against a regular expression.'),('Request Reply',' The Request Reply Flow Control provides support for an asynchronous request/reply message pattern.'),('Resequencer',' The Resequencer retains and resequences a group of messages based on each message\'s correlation sequence property.'),('REST',' Use a REST API to publish an external RESTful web service.'),('Resultset-to-Maps',' Transformers let you easily move a message between application processors that work on different types of data.'),('RMI',''),('Round Robin',' The Round Robin Flow Control sends a message to the next message processor in a circular target list.'),('Ruby',' Defines a Ruby script component to use as a transformer.'),('Salesforce',' The Salesforce Cloud Connector allows your Mule application to access the Salesforce CRM application APIs.'),('Schema Validation',' Validates a message against a schema.'),('Script',' Defines a script component to use as a transformer. The Script transformer lets you select the particular scripting engine from a pull-down list. The predefined script transformers Groovy, JavaScript, Python, and Ruby have the scripting engines already set.'),('Serializable-to-Byte-Array',' Transformers let you easily move a message between application processors that work on different types of data.'),('Servlet',' The Servlet Endpoint allows Mule applications to listen for messages or events received via a Servlet request.'),('SFTP',''),('SMTP',''),('SOAP',' Publish a SOAP web service via JAX-WS annotations, WSDL, or CXF Simple Service using Apache CXF.'),('Splitter',' Using an expression, splits a message into separate fragments and then sends these fragments to the next message processor.'),('SSL (TLS)',''),('STDIO',''),('String-to-Byte-Array',' Transformers let you easily move a message between application processors that work on different types of data.'),('TCP Polling',''),('TCP',''),('Thread Per Processor Processing Strategy',''),('Transformer Ref',' References a transformer defined as a global element.'),('Twilio',' The Twilio Cloud Connector enables a Mule application to build voice applications and send SMS messages.'),('Twitter',' The Twitter Cloud Connector enables a Mule application to access the Twitter social networking APIs.'),('UDP',''),('Until Successful',' The Until Successful Flow Control routes messages asynchronously until successful.'),('VM',''),('Weblogic JMS',''),('Wildcard',' Matches string messages against a wildcard pattern.'),('WMQ XA',''),('WMQ',''),('XML-to-Maps',' Transformers let you easily move a message between application processors that work on different types of data.'),('Xml-to-Object',' Use a XML-to-Object transformer to transform XML data to a Java Object (also referred to as Java Bean graphs) using XStream.'),('XSLT',' Use a XSLT Transformer to transform XML data using XSLT.');
/*!40000 ALTER TABLE `operators` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2013-10-28 23:44:44
